
<Workspace Name="SampleBuild2">
    <OutputDir>bin</OutputDir>
    <IntermediateDir>bin-int</IntermediateDir>

    <Project Name="Api" Kind="SharedLibrary" Arch="x64" Language="C++"  CppVersion="17" Compiler="g++">
        <Configuration Name="Debug">
            <Flags>
                <Item>ggdb</Item>
                <Item>Og</Item>
            </Flags>
            <Defines>
                <Item>API_DEBUG</Item>
            </Defines>
        </Configuration>

        <SourceDirs>
            <Item>Api</Item>
        </SourceDirs>
    </Project>
    
    <Project Name="Driver" Kind="ConsoleApp" Arch="x64" Language="C++"  CppVersion="17" Compiler="g++">
        <Configuration Name="Debug">
            <Flags>
                <Item>ggdb</Item>
                <Item>Og</Item>
            </Flags>
            <Defines>
                <Item>API_DEBUG</Item>
            </Defines>
        </Configuration>

        <LibraryDirs>
            <Item>bin\Debug</Item>
        </LibraryDirs>
        <References>
            <Item>Api</Item>
        </References>

        <SourceDirs>
            <Item>./</Item>
        </SourceDirs>
    </Project>
    
</Workspace>

<!-- TODO:
1. Implement use of special variables (a la Visual Studio, premake) e.g. $(Configuration)
   In this case, $(Configuration) = Debug | Release; this would be used in tags such as
   <LibraryDirs> and <SourceDirs>
   <LibraryDirs>
       <Item>bin\$(Configuration)</Item>
   </LibraryDirs>
2. Building of dependencies before dependents, e.g. below, Driver needs Api, so Api has to
   be built before, NOT AFTER.
3. Put <Defines> in one place in the <Project>, and not have separate definitions, depending
   on the configuration. The configuration would be defined in the <Item> tag within the 
   <Defines>
        <Item Configuration="Debug">API_DEBUG</Item>
        <Item Configuration="Release">API_RELEASE</Item>
        <Item>API_WIN32</Item>
    </Defines>
4. Cleaning (deleting files from output directories) and checking of output files in their
   respective directories before building to optimizing building/compiling process
5. (OPTIONAL) Filewatcher for XML project file, to auto-build on modified; or filewatch the
   CWD to auto-build on any file modified.
-->

